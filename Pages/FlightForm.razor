@page "/FlightSave"
@using Radzen.Blazor
@using Radzen
@using System.Net.Http.Json;
@using System.Text.Json
@inject HttpClient Http
@using System.Text
@using System.Net.Http.Headers
@inject NotificationService notificationService
@using FrontEndBlazor.Model
<PageTitle>Save Form</PageTitle>

<RadzenTemplateForm TItem="Flight" Data=@model Submit=@OnSubmit>
    <p>
        <RadzenLabel Component="Destination" Text="Destination" />
        <RadzenTextBox Name="Destination" @bind-Value=@model.Destination @ref="Destination" Placeholder="Destiantion" />
        <RadzenRequiredValidator Component="Destination" Text="Destination is required!"  />
    </p>
    <p>
        <RadzenLabel Component="Origin" Text="Origin" />
        <RadzenTextBox Name="Origin" @bind-Value=@model.Origin @ref="Origin" Placeholder="Origin"/>
        <RadzenRequiredValidator Component="Origin" Text="Origin is required!" />
    </p>
    <p>
        <RadzenLabel Component="Price" Text="Price" />
        <RadzenNumeric Name="Price" @bind-Value=@model.Price Min="0" Max="100" Step="1" @ref="Price" Placeholder="Price"/>
    </p>
    <p>
        <RadzenLabel Component="" Text="Journey" />
        <RadzenDropDown Data="@transports" TextProperty="Mostra" ValueProperty="Id"  @bind-Value="@model.IdTransportFK" Placeholder="Select an item" Style="width:200px;" />

    </p>
    <p>
    <RadzenLabel Text="Date Start" Component="RadzenDatePickerBindValue" Style="margin-right: 8px; vertical-align: middle;" />
    <RadzenDatePicker @bind-Value=@model.DateStart Name="DateStart" ShowCalendarWeek />
    </p>
    <p>
    <RadzenLabel Text="DateEnd" Component="RadzenDatePickerBindValue" Style="margin-right: 8px; vertical-align: middle;" />
    <RadzenDatePicker @bind-Value=@model.DateEnd Name="DateEnd" ShowCalendarWeek />
    </p>
    <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
</RadzenTemplateForm>
<RadzenCard style="overflow: auto; position:absolute">
    
@foreach(var e in events.OrderByDescending(e => e.Key))
{
    @e.Value
    <br>
}    
</RadzenCard>

@code {
    [SupplyParameterFromQuery(Name = "Update")]
    public string Update { get; set; }
    private RadzenTextBox Destination;
    private RadzenTextBox Origin;
    private RadzenNumeric<double> Price;
    private List<Transports> transports;
    private string selectedItem;
    private void OnChange(string value)
    {
        selectedItem = value;
        // Puedes agregar lógica adicional aquí
    }

    Flight model = new Flight();
    Dictionary<DateTime, string> events = new();
    protected  override async Task OnInitializedAsync()
    {
        transports = await Http.GetFromJsonAsync<List<Transports>>($"http://localhost:3002/Transports");
        if(Update != null){
            Flight flight = await Http.GetFromJsonAsync<Flight>($"http://localhost:3002/Flights/{Update}");
            model.Destination = flight.Destination;
            model.Origin = flight.Origin;
            model.Price = flight.Price;
            Console.WriteLine(flight.Origin);
        }
    }
    async Task OnSubmit(Flight flight)
    {
        var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = null // O null si prefieres PascalCase
            };

        var jsonData = JsonSerializer.Serialize(flight, options);
        var content = new StringContent(jsonData, Encoding.UTF8);
        Console.WriteLine(jsonData);
        HttpResponseMessage response;
        if(Update == null){
            response = await Http.PostAsync("http://localhost:3002/Flights", content);
        }
        else{
            response = await Http.PutAsync($"http://localhost:3002/Flights/{Update}", content);

        }
        response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<Flight>(responseContent, options);
            NotificationMessage message = new NotificationMessage() 
            {
                Severity = NotificationSeverity.Success,
                Summary = "Vuelo Agregado",
                Detail = "Subido"
            };
            notificationService.Notify(message);
            events.Add(DateTime.Now, message.Severity + "Notification");
            await InvokeAsync(() => {StateHasChanged();});
            Console.WriteLine(result);
        }
        else
        {
            // Manejar el error de la solicitud
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }
}
