@page "/weather"
@inject HttpClient Http
@using System.Reflection
@using Radzen;
@using Radzen.Blazor;
@inject DialogService dialogService
@using System.Text;
@using FrontEndBlazor.Model;
<PageTitle>Flights</PageTitle>

<h1>Flights</h1>

<p>Este Componente muestra los diferentes vuelos disponibles</p>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenLink Path="FlightSave">
        <RadzenButton ButtonStyle="ButtonStyle.Success">
            Add
        </RadzenButton>
    </RadzenLink>
    <RadzenAlert Visible=IsVisible AlertStyle="AlertStyle.Danger">
        @Alerta
    </RadzenAlert>
    <RadzenDataGrid @ref="grid" Data="@forecasts" TItem="Flight" AllowPaging="true" PageSize="10" AllowSorting="true"
        AllowFiltering="true">
        <Columns>
            <RadzenDataGridColumn TItem="Flight" Property="Destination" Title="Destination" />
            <RadzenDataGridColumn TItem="Flight" Property="Origin" Title="Origin" />
            <RadzenDataGridColumn TItem="Flight" Property="Price" Title="Price" />
            <RadzenDataGridColumn TItem="Flight" Property="DateStart" Title="Date Start">
                <Template Context="Flight">
                    @if (Flight.DateStart != null)
                    {
                        @Flight.DateStart
                    }
                    else
                    {
                        <span>No date available</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Flight" Property="DateEnd" Title="Date End">
                <Template Context="Flight">
                    @if (Flight.DateEnd != null)
                    {
                        @Flight.DateEnd
                    }
                    else
                    {
                        <span>No date available</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Flight" Title="Opciones">
                <Template Context="flight">
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@(() =>  Delete(flight))">
                        Eliminar
                    </RadzenButton>
                    <RadzenLink Path=@GetUpdatePath(flight.Id)>
                        <RadzenButton ButtonStyle="ButtonStyle.Warning">
                            Update
                        </RadzenButton>
                    </RadzenLink>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    private List<Flight> forecasts;
    private Type type;
    string Alerta;
    private PropertyInfo[] properties;
    private RadzenDataGrid<Flight> grid;
    private RadzenAlert Alert;
    private bool IsVisible = false;
    private string GetUpdatePath(int flightId)
    {
        return $"FlightSave?Update={flightId}";
    }
    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<List<Flight>>("http://localhost:3002/Flights");

        type = forecasts.First().GetType();

        properties = type.GetProperties();

    }
    private async Task Delete(Flight flight)
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Delete, $"http://localhost:3002/Flights/{flight.Id}");

            var response = await Http.SendAsync(request);
            response.EnsureSuccessStatusCode();
            // Eliminar el vuelo de la lista forecasts
            forecasts.Remove(flight);

            // Opcional: Actualizar la vista del grid
            await grid.Reload();
            Alerta = "SE HA Eliminado Con Exito";
            IsVisible = true;
        }
        catch (HttpRequestException ex)
        {
            // Manejar la excepción según sea necesario
            Console.WriteLine($"Request error: {ex.Message}");
        }
    }
}
